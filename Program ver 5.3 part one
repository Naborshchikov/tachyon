{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"Features of matter to optimize thermonuclear fusion \\n\n",
    "and understand the possibilities of time travel and rejuvenation\"\"\" \n",
    "# Program ver 5.3 part one\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from numpy import *\n",
    "from mpl_toolkits.mplot3d import Axes3D \n",
    "from matplotlib.pyplot import *\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.dates as mdates\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.interpolate import PchipInterpolator\n",
    "from scipy.signal import savgol_filter\n",
    "from prettytable import PrettyTable\n",
    "from collections import namedtuple\n",
    "import csv\n",
    "# Uncomment the line below if you plan to view 3D graphics from different angles.\n",
    "# %matplotlib notebook\n",
    "# Error elimination, since it does not affect the values obtained\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=RuntimeWarning) \n",
    "\n",
    "\"\"\"A table with the initial knowledge with which the calculation begins\"\"\"\n",
    "\n",
    "Initial_conditions = [[1, 'Project implemented in Python', 'ver. 3.7.6 \\n'],\n",
    "                      [2, 'ID - Anaconda', 'ver. 2020 02 \\n'],\n",
    "                      [3, 'All data presented in the SI system', 'nist.gov/\\n'],\n",
    "                      [4, 'All constants are taken from the\\n'\n",
    "                       'data the US NIST.\\n', 'nist.gov/ \\n'],\n",
    "                      [5, 'Particle structure -\\n'                       \n",
    "                       'published works of Nobel laureates.\\n', 'published scientific works \\n'],\n",
    "                      [6, 'Protons, neutrons\\n'\n",
    "                       'have a core and two shells.\\n', 'Robert Hofstadter \\n'],\n",
    "                      [7, 'Speed of light in a vacuum, c = 299792458\\n', 'nist.gov/ \\n'],\n",
    "                      [8, 'Electrical constant, ε0 = 8.8541878128E−12\\n', 'nist.gov/ \\n'],\n",
    "                      [9, 'Gravitational constant, G = 6.67430E-11\\n', 'nist.gov/ \\n'],\n",
    "                      [10, 'Electric charge of an electron\\n'\n",
    "                       '-1.602176634e-19 \\n', 'nist.gov/ \\n'],\n",
    "                      [11, 'π = 3.14159265358979', \"Scientific American\\n\"],\n",
    "                      [12, \"Planck's constant, h = 6.62607015E−34\", 'nist.gov/\\n'],\n",
    "                      [13, 'Electron diameter 10e−22,\\n', 'Hans D. Dehmelt Experiments\\n'],\n",
    "                      [14, 'The proton consists of two quarks \\n', 'Murray Gell-Mann\\n'],\n",
    "                      [15, 'The newneutron consists of two quarks \\n', 'Murray Gell-Mann \\n'],\n",
    "                      [16, 'Quark radius − (0.47 · 10E−16 cm)E2\\n'\n",
    "                       '< RE2 < (0.43 · 10E−16 cm)E2 \\n', 'arxiv.org/pdf/1604.01280.pdf \\n'],\n",
    "                      [17, 'Additional information\\n', 'Data from available sources. \\n'],\n",
    "                     [18, \"Quark condensate provides about 9\\n\"\n",
    "                      \"percent of the proton's mass\\n\", 'Physical Review Letters, 2018\\n,'\n",
    "                      ' website arXiv.org\\n'],\n",
    "                     [19, 'Electron diameter: 10e−22 \\n', 'Nobel lecture, December, 8, 1989,\\n'\n",
    "                      ' Hans D. Dehmelt Experiments with \\n'\n",
    "                      'an isolated subatomic particle at rest\\n'],\n",
    "                     [20, 'proton mass: 1.67262192369E-27\\n', 'nist.gov/\\n'],\n",
    "                     [21, 'neutron mass: 1.67492749804E-27\\n', 'nist.gov/\\n'],\n",
    "                     [22, 'The magnitude of the charge\\n'\n",
    "                      'of the core, shells in the proton\\n'\n",
    "                     'respectively: 0.35; 0.5; 0.15\\n', 'Robert Hofstadter the\\n'\n",
    "                      'Nobel laureate\\n'], \n",
    "                     [23, 'The magnitude of the charge of the core,\\n'\n",
    "                      ' shells in the neutron\\n'\n",
    "                     'respectively: 0.35; - 0.5; 0.15\\n', 'Robert Hofstadter the\\n'],\n",
    "                     [24, 'The proton radius: 0.84 fm\\n', 'aps.org/publications/apsnews/201806/proton.cfm\\n'],\n",
    "                     [25, 'The neutron radius: 0.8e−15\\n', 'Povh, B.; Rith, K.(2002).\\n'],\n",
    "                     [26, 'Rradius of the proton core: 0.23 ± 0.03 F\\n', 'https://doi.org/10.1103/PhysRevD.18.2484\\n'],\n",
    "                     [27, 'Rradius of the neutron core:\\n'\n",
    "                      ' from 0.3 to 0.36 fm\\n', 'arxiv.org/pdf/1810.00486.pdf\\n'],\n",
    "                     [28, 'The radius of the inner shell of the neutron\\n'\n",
    "                      'is approximately 0.6 fm.\\n', 'actaphys.uj.edu.pl/fulltext?series=Reg&vol=30&page=119\\n'],\n",
    "                     [29, 'Proton, neutron consists of a nucleus and two\\n'\n",
    "                      'shells, or three quarks, ... \\n', 'https://cerncourier.com/a/the-proton-laid-bare/ \\n'\n",
    "                     'https://www.nature.com/articles/s41586-019-0925-9'],\n",
    "                     [30, 'This calculation starts with the fact that \\n'\n",
    "                      'a quark consists of a nucleus and two shells \\n', 'This is a conditional division']] \n",
    "table1 = PrettyTable(['#', 'Description', 'Link to source/ comments'])\n",
    "for rec in Initial_conditions:\n",
    "    table1.add_row(rec)\n",
    "    \n",
    "\"\"\"Program class for obtaining data for analysis\"\"\"\n",
    "\n",
    "class Algorithm():\n",
    "# Assigning values to constants.\n",
    "# Constants with more characters than constants according to US NIST data are index two.\n",
    "\n",
    "    constantε0 = 8.8541878128e-12\n",
    "    constantε02 = 8.85418781762039e-12\n",
    "    \n",
    "    constantc = 299792458\n",
    "        \n",
    "    constantg = 6.67430E-11\n",
    "    constantg2 = 6.67448478E-11\n",
    "    \n",
    "    constanth = 6.62607015e-34     \n",
    "\n",
    "# Data from different research groups may differ from each other.\n",
    "\n",
    "    π = 3.14159265358979\n",
    "    \n",
    "# electron mass\n",
    "    me = 9.1093837015e-31\n",
    "    \n",
    "# electron diameter\n",
    "    de = 10e-22\n",
    "    \n",
    "# Electric charge of an electron\n",
    "    qe = 1.602176634e-19\n",
    "    qe2 = 1.602176620898e-19\n",
    "    \n",
    "# proton mass  \n",
    "    mp = 1.67262192369E-27\n",
    "# radius of a proton estimated by electric charge\n",
    "    rp = 0.84e-15\n",
    "# Rradius of the proton core\n",
    "    rpc = 0.23e-15\n",
    "# The radius of the inner layer (assumption).\n",
    "    rpi = 0.6e-15 \n",
    "# neutron mass\n",
    "    mn = 1.67492749804E-27\n",
    "# radius of a neutron\n",
    "    rn = 0.8e-15\n",
    "# Radius of the neutron core, \n",
    "# following from the hadronic and nuclear matter properties\n",
    "    rnc = 0.33e-15\n",
    "# The radius of the inner layer.\n",
    "    rni = 0.6e-15\n",
    "    \n",
    "# quark radius\n",
    "# The third sign \"n\" - for negative radius\n",
    "# The third sign \"p\" - for positive radius\n",
    "    qrn = - 0.47 * 10e-18\n",
    "    qrp = 0.43 * 10e-18\n",
    "    \n",
    "# The magnitude of the charge of the core, shells respectively\n",
    "\n",
    "# proton\n",
    "    SHELLP0 = 0.35\n",
    "    SHELLP1 = 0.5\n",
    "    SHELLP2 = 0.15\n",
    "    \n",
    "# neutron\n",
    "    SHELLN0 = 0.35\n",
    "    SHELLN1 = -0.5\n",
    "    SHELLN2 = 0.15\n",
    "    \n",
    "    def __init__ (self, xq02, xq13, xv02, xv13, xm02, xm13):\n",
    "        \n",
    "        \n",
    "# The first symbol is the name of the quark, the second symbol is:\n",
    "# 0 - core, 1 - inner shell, 2 - outer shell.\n",
    "\n",
    "# RULE 1:\n",
    "# The calculation takes into account that the quarks of the nucleus\n",
    "# can not fall on a single line, as it will mean the synthesis of quarks\n",
    "# and the loss of their identity.\n",
    "\n",
    "# RULE 2:\n",
    "# Quarks are connected if there is their intersection is at least one shell.\n",
    "\n",
    "# RULE 3:\n",
    "# The combination of quarks is obliged to provide the densest arrangement.\n",
    "\n",
    "        self.xq02 = xq02\n",
    "        self.xq13 = xq13\n",
    "                \n",
    "        self.xv02 = xv02\n",
    "        self.xv13 = xv13\n",
    "                \n",
    "        self.xm02 = xm02\n",
    "        self.xm13 = xm13\n",
    "                \n",
    "# The combination of \"u\" and \"d\" quarks makes it possible to obtain several \n",
    "# variants of matrices for the proton, neutron.\n",
    "\n",
    "# The matrixes for the proton.\n",
    "a000 = ['u0', 0,   0,   0,  0]\n",
    "a001 = [ 0,  'u1', 0,   0,  0]\n",
    "a002 = [ 0,   0,  'u2', 0,  0]\n",
    "\n",
    "a003 = [0, 'u0',  0,   0,   0]\n",
    "a004 = [0,  0,   'u1', 0,   0]\n",
    "a005 = [0,  0,    0,  'u2', 0]\n",
    "\n",
    "a006 = [0,  0, 'd0', 0,    0]\n",
    "a007 = [0,  0,  0,  'd1',  0]\n",
    "a008 = [0,  0,  0,   0,   'd2']\n",
    "\n",
    "#a0 = list(zip(a000, a001, a002, a003, a004, a005, a006, a007, a008))\n",
    "\n",
    "\"\"\"The result is a matrix.\n",
    "a0 = [('u0', 0,   0,   0,   0,   0,   0,   0,   0), \n",
    "      (0,   'u1', 0,  'u0', 0,   0,   0,   0,   0), \n",
    "      (0,    0,  'u2', 0,  'u1', 0,  'd0', 0,   0),\n",
    "      (0,    0,   0,   0,   0,  'u2', 0,  'd1', 0), \n",
    "      (0,    0,   0,   0,   0,   0,   0,   0,  'd2')]\"\"\"\n",
    "\n",
    "      \n",
    "# The matrixes for the neutron.\n",
    "a020 = ['d0', 0,   0,   0,   0]\n",
    "a021 = [ 0,  'd1', 0,   0,   0]\n",
    "a022 = [ 0,   0,  'd2', 0,   0]\n",
    "\n",
    "a023 = [0, 'd0',  0,   0,   0]\n",
    "a024 = [0,  0,   'd1', 0,   0]\n",
    "a025 = [0,  0,    0,  'd2', 0]\n",
    "\n",
    "a026 = [0,  0, 'u0', 0,   0]\n",
    "a027 = [0,  0,  0,  'u1', 0]\n",
    "a028 = [0,  0,  0,   0,  'u2']\n",
    "\n",
    "#a2 = list(zip(a020, a021, a022, a023, a024, a025, a026, a027, a028))\n",
    "\n",
    "\"\"\"The result is a matrix.\n",
    "a2 = [['d0',  0,  0,   0,   0,   0,   0,   0,   0], \n",
    "      [0,   'd1', 0,  'd0', 0,   0,   0,   0,   0], \n",
    "      [0,    0,  'd2', 0,  'd1', 0,  'u0', 0,   0],\n",
    "      [0,    0,   0,   0,   0,  'd2', 0,  'u1', 0], \n",
    "      [0,    0,   0,   0,   0,   0,   0,   0,  'u2']]\"\"\"\n",
    "\n",
    "# Since we know the values for the nuclei and shells of the proton, neutron, \n",
    "# for the calculation we use the matrices a0 with a2.\n",
    "\n",
    "\"\"\"It looks visually.\n",
    "[['u0' '0' '0' '0' '0' '0' '0' '0' '0']\n",
    " ['0' 'u1' '0' 'u0' '0' '0' '0' '0' '0']\n",
    " ['0' '0' 'u2' '0' 'u1' '0' 'd0' '0' '0']\n",
    " ['0' '0' '0' '0' '0' 'u2' '0' 'd1' '0']\n",
    " ['0' '0' '0' '0' '0' '0' '0' '0' 'd2']]\n",
    "[['d0' '0' '0' '0' '0' '0' '0' '0' '0']\n",
    " ['0' 'd1' '0' 'd0' '0' '0' '0' '0' '0']\n",
    " ['0' '0' 'd2' '0' 'd1' '0' 'u0' '0' '0']\n",
    " ['0' '0' '0' '0' '0' 'd2' '0' 'u1' '0']\n",
    " ['0' '0' '0' '0' '0' '0' '0' '0' 'u2']]\"\"\"\n",
    "\n",
    "# All lines with 0 in the second character form a core.\n",
    "# The remaining two lines form the inner and outer shell.\n",
    "\n",
    "# Matrices are converted into an array, taking into account the available\n",
    "# data for the calculation. \n",
    "# The array represents the equations for the proton and neutron.\n",
    "      \n",
    "# The top three lines of the array are proton (coefficients for the array)\n",
    "# (u0+u0 = 2; u1+u1 = 2; u2 = 1; d0 = 1) - core for a0; (d1 = 1; u2 = 1) - \n",
    "# inner shell for a0; d2 = 1 - outer shell for a0\n",
    "\n",
    "# The bottom three lines of the array are a neutron (coefficients for the array)\n",
    "# (d0+d0 = 2; d1+d1 = 2; d2 = 1; u0 = 1) - core for a2; (d2 = 1; u1 = 1) - \n",
    "# inner shell for a2; u2 = 1 - outer shell for a2\n",
    "\n",
    "x00 = (a000.count('u0') + a001.count('u0') + a002.count('u0') +\n",
    "       a003.count('u0') + a004.count('u0') + a006.count('u0')) \n",
    "\n",
    "x01 = (a000.count('u1') + a001.count('u1') + a002.count('u1') +\n",
    "       a003.count('u1') + a004.count('u1') + a006.count('u1'))\n",
    "\n",
    "x02 = (a000.count('u2') + a001.count('u2') + a002.count('u2') +\n",
    "       a003.count('u2') + a004.count('u2') + a006.count('u2'))\n",
    "\n",
    "x03 = (a000.count('d0') + a001.count('d0') + a002.count('d0') +\n",
    "       a003.count('d0') + a004.count('d0') + a006.count('d0'))\n",
    "\n",
    "x04 = (a000.count('d1') + a001.count('d1') + a002.count('d1') +\n",
    "       a003.count('d1') + a004.count('d1') + a006.count('d1'))\n",
    "\n",
    "x05 = (a000.count('d2') + a001.count('d2') + a002.count('d2') +\n",
    "       a003.count('d2') + a004.count('d2') + a006.count('d2'))\n",
    "\n",
    "an20 = [0]\n",
    "an20.insert(0, x00)\n",
    "an20.insert(1, x01)\n",
    "an20.insert(2, x02)\n",
    "an20.insert(3, x03)\n",
    "an20.insert(4, x04)\n",
    "an20.insert(5, x05)\n",
    "an20.pop(6)\n",
    "\n",
    "x10 = (a005.count('u0') + a007.count('u0')) \n",
    "x11 = (a005.count('u1') + a007.count('u1'))\n",
    "x12 = (a005.count('u2') + a007.count('u2'))\n",
    "x13 = (a005.count('d0') + a007.count('d0'))\n",
    "x14 = (a005.count('d1') + a007.count('d1'))\n",
    "x15 = (a005.count('d2') + a007.count('d2'))\n",
    "\n",
    "an21 = [0]\n",
    "an21.insert(0, x10)\n",
    "an21.insert(1, x11)\n",
    "an21.insert(2, x12)\n",
    "an21.insert(3, x13)\n",
    "an21.insert(4, x14)\n",
    "an21.insert(5, x15)\n",
    "an21.pop(6)\n",
    "\n",
    "x20 = a008.count('u0') \n",
    "x21 = a008.count('u1')\n",
    "x22 = a008.count('u2')\n",
    "x23 = a008.count('d0')\n",
    "x24 = a008.count('d1')\n",
    "x25 = a008.count('d2')\n",
    "\n",
    "an22 = [0]\n",
    "an22.insert(0, x20)\n",
    "an22.insert(1, x21)\n",
    "an22.insert(2, x22)\n",
    "an22.insert(3, x23)\n",
    "an22.insert(4, x24)\n",
    "an22.insert(5, x25)\n",
    "an22.pop(6)\n",
    "\n",
    "x30 = (a020.count('u0') + a021.count('u0') + a022.count('u0') +\n",
    "       a023.count('u0') + a024.count('u0') + a026.count('u0')) \n",
    "\n",
    "x31 = (a020.count('u1') + a021.count('u1') + a022.count('u1') +\n",
    "       a023.count('u1') + a024.count('u1') + a026.count('u1'))\n",
    "\n",
    "x32 = (a020.count('u2') + a021.count('u2') + a022.count('u2') +\n",
    "       a023.count('u2') + a024.count('u2') + a026.count('u2'))\n",
    "\n",
    "x33 = (a020.count('d0') + a021.count('d0') + a022.count('d0') +\n",
    "       a023.count('d0') + a024.count('d0') + a026.count('d0'))\n",
    "\n",
    "x34 = (a020.count('d1') + a021.count('d1') + a022.count('d1') +\n",
    "       a023.count('d1') + a024.count('d1') + a026.count('d1'))\n",
    "\n",
    "x35 = (a020.count('d2') + a021.count('d2') + a022.count('d2') +\n",
    "       a023.count('d2') + a024.count('d2') + a026.count('d2'))\n",
    "\n",
    "a120 = [0]\n",
    "a120.insert(0, x30)\n",
    "a120.insert(1, x31)\n",
    "a120.insert(2, x32)\n",
    "a120.insert(3, x33)\n",
    "a120.insert(4, x34)\n",
    "a120.insert(5, x35)\n",
    "a120.pop(6)\n",
    "\n",
    "x40 = (a025.count('u0') + a027.count('u0')) \n",
    "x41 = (a025.count('u1') + a027.count('u1'))\n",
    "x42 = (a025.count('u2') + a027.count('u2'))\n",
    "x43 = (a025.count('d0') + a027.count('d0'))\n",
    "x44 = (a025.count('d1') + a027.count('d1'))\n",
    "x45 = (a025.count('d2') + a027.count('d2'))\n",
    "\n",
    "a121 = [0]\n",
    "a121.insert(0, x40)\n",
    "a121.insert(1, x41)\n",
    "a121.insert(2, x42)\n",
    "a121.insert(3, x43)\n",
    "a121.insert(4, x44)\n",
    "a121.insert(5, x45)\n",
    "a121.pop(6)\n",
    "\n",
    "x50 = a028.count('u0') \n",
    "x51 = a028.count('u1')\n",
    "x52 = a028.count('u2')\n",
    "x53 = a028.count('d0')\n",
    "x54 = a028.count('d1')\n",
    "x55 = a028.count('d2')\n",
    "\n",
    "a122 = [0]\n",
    "a122.insert(0, x50)\n",
    "a122.insert(1, x51)\n",
    "a122.insert(2, x52)\n",
    "a122.insert(3, x53)\n",
    "a122.insert(4, x54)\n",
    "a122.insert(5, x55)\n",
    "a122.pop(6)\n",
    "\n",
    "a02 = [an20, an21, an22, a120, a121, a122]\n",
    "a02 = array(a02)\n",
    "\n",
    "\"\"\"It looks visually.\n",
    "a02 = array([[2.0 , 2.0, 1.0, 1.0, 0.0, 0.0],\n",
    "             [0.0, 0.0, 1.0, 0.0, 1.0, 0.0], \n",
    "             [0.0, 0.0, 0.0, 0.0, 0.0, 1.0], \n",
    "             [1.0, 0.0, 0.0, 2.0, 2.0, 1.0], \n",
    "             [0.0, 1.0, 0.0, 0.0, 0.0, 1.0], \n",
    "             [0.0, 0.0, 1.0, 0.0, 0.0, 0.0]])\"\"\"\n",
    "\n",
    "a010 = ['u0', 0,   0,   0,   0]\n",
    "a011 = [ 0,  'u1', 0,   0,   0]\n",
    "a012 = [ 0,   0,  'u2', 0,   0]\n",
    "\n",
    "a013 = [0, 'd0',  0,   0,   0]\n",
    "a014 = [0,  0,   'd1', 0,   0]\n",
    "a015 = [0,  0,    0,  'd2', 0]\n",
    "\n",
    "a016 = [0,  0, 'u0', 0,   0]\n",
    "a017 = [0,  0,  0,  'u1', 0]\n",
    "a018 = [0,  0,  0,   0,  'u2']\n",
    "\n",
    "#a1 = list(zip(a010, a011, a012, a013, a014, a015, a016, a017, a018))\n",
    "\n",
    "\"\"\"The result is a matrix.\n",
    "a1 = [('u0',  0,  0,   0,   0,   0,   0,   0,   0), \n",
    "      (0,   'u1', 0,  'd0', 0,   0,   0,   0,   0), \n",
    "      (0,    0,  'u2', 0,  'd1', 0,  'u0', 0,   0),\n",
    "      (0,    0,   0,   0,   0,  'd2', 0,  'u1', 0), \n",
    "      (0,    0,   0,   0,   0,   0,   0,   0,  'u2')]\"\"\"\n",
    "\n",
    "a030 = ['d0', 0,   0,   0,   0]\n",
    "a031 = [ 0,  'd1', 0,   0,   0]\n",
    "a032 = [ 0,   0,  'd2', 0,   0]\n",
    "\n",
    "a033 = [0, 'u0',  0,   0,   0]\n",
    "a034 = [0,  0,   'u1', 0,   0]\n",
    "a035 = [0,  0,    0,  'u2', 0]\n",
    "\n",
    "a036 = [0,  0, 'd0', 0,   0]\n",
    "a037 = [0,  0,  0,  'd1', 0]\n",
    "a038 = [0,  0,  0,   0,  'd2']\n",
    "\n",
    "#a3 = list(zip(a030, a031, a032, a033, a034, a035, a036, a037, a038))\n",
    "\n",
    "\"\"\"The result is a matrix.\n",
    "a3 = [('d0', 0,   0,   0,   0,   0,   0,   0,   0), \n",
    "      (0,   'd1', 0,  'u0', 0,   0,   0,   0,   0), \n",
    "      (0,    0,  'd2', 0,  'u1', 0,  'd0', 0,   0),\n",
    "      (0,    0,   0,   0,   0,  'u2', 0,  'd1', 0), \n",
    "      (0,    0,   0,   0,   0,   0,   0,   0,  'd2')]\"\"\"\n",
    "\n",
    "# Since we know the values for the nuclei and shells of the proton, neutron, \n",
    "# for the calculation we use the matrices a1 with a3.\n",
    "\"\"\"It looks visually.\n",
    "[['u0' '0' '0' '0' '0' '0' '0' '0' '0']\n",
    " ['0' 'u1' '0' 'd0' '0' '0' '0' '0' '0']\n",
    " ['0' '0' 'u2' '0' 'd1' '0' 'u0' '0' '0']\n",
    " ['0' '0' '0' '0' '0' 'd2' '0' 'u1' '0']\n",
    " ['0' '0' '0' '0' '0' '0' '0' '0' 'u2']]\n",
    "[['d0' '0' '0' '0' '0' '0' '0' '0' '0']\n",
    " ['0' 'd1' '0' 'd0' '0' '0' '0' '0' '0']\n",
    " ['0' '0' 'd2' '0' 'd1' '0' 'u0' '0' '0']\n",
    " ['0' '0' '0' '0' '0' 'd2' '0' 'u1' '0']\n",
    " ['0' '0' '0' '0' '0' '0' '0' '0' 'u2']]\"\"\"\n",
    "\n",
    "# The top three lines of the array are a proton (coefficients for the array)\n",
    "# (u0+u0 = 2; u1 = 1; u2 = 1; d0 = 1; d1 = 1) - core for a1; (d2 = 1; u1 = 1) - \n",
    "# inner shell for a1; u2 = 1 - outer shell for a1\n",
    "\n",
    "# The bottom three lines of the array are neutron (coefficients for the array)\n",
    "# (d0+d0 = 2; d1 = 1; d2 = 1; u0 = 1; u1 = 1) - core for a3; (u2 = 1; d1 = 1) - \n",
    "# inner shell for a3; d2 = 1 - outer shell for a3\n",
    "\n",
    "x60 = (a010.count('u0') + a011.count('u0') + a012.count('u0') +\n",
    "       a013.count('u0') + a014.count('u0') + a016.count('u0')) \n",
    "\n",
    "x61 = (a010.count('u1') + a011.count('u1') + a012.count('u1') +\n",
    "       a013.count('u1') + a014.count('u1') + a016.count('u1'))\n",
    "\n",
    "x62 = (a010.count('u2') + a011.count('u2') + a012.count('u2') +\n",
    "       a013.count('u2') + a014.count('u2') + a016.count('u2'))\n",
    "\n",
    "x63 = (a010.count('d0') + a011.count('d0') + a012.count('d0') +\n",
    "       a013.count('d0') + a014.count('d0') + a016.count('d0'))\n",
    "\n",
    "x64 = (a010.count('d1') + a011.count('d1') + a012.count('d1') +\n",
    "       a013.count('d1') + a014.count('d1') + a016.count('d1'))\n",
    "\n",
    "x65 = (a010.count('d2') + a011.count('d2') + a012.count('d2') +\n",
    "       a013.count('d2') + a014.count('d2') + a016.count('d2'))\n",
    "\n",
    "a123 = [0]\n",
    "a123.insert(0, x60)\n",
    "a123.insert(1, x61)\n",
    "a123.insert(2, x62)\n",
    "a123.insert(3, x63)\n",
    "a123.insert(4, x64)\n",
    "a123.insert(5, x65)\n",
    "a123.pop(6)\n",
    "\n",
    "x70 = (a015.count('u0') + a017.count('u0')) \n",
    "x71 = (a015.count('u1') + a017.count('u1'))\n",
    "x72 = (a015.count('u2') + a017.count('u2'))\n",
    "x73 = (a015.count('d0') + a017.count('d0'))\n",
    "x74 = (a015.count('d1') + a017.count('d1'))\n",
    "x75 = (a015.count('d2') + a017.count('d2'))\n",
    "\n",
    "a124 = [0]\n",
    "a124.insert(0, x70)\n",
    "a124.insert(1, x71)\n",
    "a124.insert(2, x72)\n",
    "a124.insert(3, x73)\n",
    "a124.insert(4, x74)\n",
    "a124.insert(5, x75)\n",
    "a124.pop(6)\n",
    "\n",
    "\n",
    "x80 = a018.count('u0') \n",
    "x81 = a018.count('u1')\n",
    "x82 = a018.count('u2')\n",
    "x83 = a018.count('d0')\n",
    "x84 = a018.count('d1')\n",
    "x85 = a018.count('d2')\n",
    "\n",
    "a125 = [0]\n",
    "a125.insert(0, x80)\n",
    "a125.insert(1, x81)\n",
    "a125.insert(2, x82)\n",
    "a125.insert(3, x83)\n",
    "a125.insert(4, x84)\n",
    "a125.insert(5, x85)\n",
    "a125.pop(6)\n",
    "\n",
    "x90 = (a030.count('u0') + a031.count('u0') + a032.count('u0') +\n",
    "       a033.count('u0') + a034.count('u0') + a036.count('u0')) \n",
    "\n",
    "x91 = (a030.count('u1') + a031.count('u1') + a032.count('u1') +\n",
    "       a033.count('u1') + a034.count('u1') + a036.count('u1'))\n",
    "\n",
    "x92 = (a030.count('u2') + a031.count('u2') + a032.count('u2') +\n",
    "       a033.count('u2') + a034.count('u2') + a036.count('u2'))\n",
    "\n",
    "x93 = (a030.count('d0') + a031.count('d0') + a032.count('d0') +\n",
    "       a033.count('d0') + a034.count('d0') + a036.count('d0'))\n",
    "\n",
    "x94 = (a030.count('d1') + a031.count('d1') + a032.count('d1') +\n",
    "       a033.count('d1') + a034.count('d1') + a036.count('d1'))\n",
    "\n",
    "x95 = (a030.count('d2') + a031.count('d2') + a032.count('d2') +\n",
    "       a033.count('d2') + a034.count('d2') + a036.count('d2'))\n",
    "\n",
    "a126 = [0]\n",
    "a126.insert(0, x90)\n",
    "a126.insert(1, x91)\n",
    "a126.insert(2, x92)\n",
    "a126.insert(3, x93)\n",
    "a126.insert(4, x94)\n",
    "a126.insert(5, x95)\n",
    "a126.pop(6)\n",
    "\n",
    "x100 = (a035.count('u0') + a037.count('u0')) \n",
    "x101 = (a035.count('u1') + a037.count('u1'))\n",
    "x102 = (a035.count('u2') + a037.count('u2'))\n",
    "x103 = (a035.count('d0') + a037.count('d0'))\n",
    "x104 = (a035.count('d1') + a037.count('d1'))\n",
    "x105 = (a035.count('d2') + a037.count('d2'))\n",
    "\n",
    "a127 = [0]\n",
    "a127.insert(0, x100)\n",
    "a127.insert(1, x101)\n",
    "a127.insert(2, x102)\n",
    "a127.insert(3, x103)\n",
    "a127.insert(4, x104)\n",
    "a127.insert(5, x105)\n",
    "a127.pop(6)\n",
    "\n",
    "x110 = a038.count('u0') \n",
    "x111 = a038.count('u1')\n",
    "x112 = a038.count('u2')\n",
    "x113 = a038.count('d0')\n",
    "x114 = a038.count('d1')\n",
    "x115 = a038.count('d2')\n",
    "\n",
    "a128 = [0]\n",
    "a128.insert(0, x110)\n",
    "a128.insert(1, x111)\n",
    "a128.insert(2, x112)\n",
    "a128.insert(3, x113)\n",
    "a128.insert(4, x114)\n",
    "a128.insert(5, x115)\n",
    "a128.pop(6)\n",
    "\n",
    "a13 = [a123, a124, a125, a126, a127, a128]\n",
    "a13 = array(a13)\n",
    "\n",
    "\"\"\"It looks visually.\n",
    "a13 = array( [[2.0, 1.0, 1.0, 1.0, 1.0, 0.0], \n",
    "              [0.0, 1.0, 0.0, 0.0, 0.0, 1.0], \n",
    "              [0.0, 0.0, 1.0, 0.0, 0.0, 0.0], \n",
    "              [1.0, 1.0, 0.0, 2.0, 1.0, 1.0], \n",
    "              [0.0, 0.0, 1.0, 0.0, 1.0, 0.0], \n",
    "              [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]])\"\"\"\n",
    "\n",
    "# This formula is used at the initial stage of calculations.\n",
    "# The results obtained allow the interested person to obtain an \n",
    "#accurate volumetric model.\n",
    "# V = 4/3πR**3\n",
    "# In accordance with the existing representation\n",
    "# v - volume; u - quark \"u\"; d - quark \"d\"; n - neutron; p - proton\n",
    "# i - inner; o - outer\n",
    "    \n",
    "vu = 4/3 * Algorithm.π * (abs(Algorithm.qrn)**3 + Algorithm.qrp**3)/2\n",
    "vd = vu\n",
    "vn = 4/3 * Algorithm.π * Algorithm.rn**3\n",
    "vp = 4/3 * Algorithm.π * Algorithm.rp**3\n",
    "vrpc = 4/3 * Algorithm.π * Algorithm.rpc**3\n",
    "vrnc = 4/3 * Algorithm.π * Algorithm.rnc**3\n",
    "vrpi = 4/3 * Algorithm.π * Algorithm.rpi**3 - vrpc\n",
    "vrpo = vp - vrpc - vrpi\n",
    "vrni = 4/3 * Algorithm.π * Algorithm.rni**3 - vrnc\n",
    "vrno = vn - vrnc - vrni\n",
    "ve = 4/3 * Algorithm.π * (Algorithm.de/2)**3\n",
    "mpc = Algorithm.mp * 0.91\n",
    "mnc = Algorithm.mn * 0.91\n",
    "mpi = Algorithm.mp * 0.09 * (vrpi/vrpo)\n",
    "mni = Algorithm.mn * 0.09 * (vrni/vrno)\n",
    "mpo = Algorithm.mp - mpc - mpi\n",
    "mno = Algorithm.mn - mnc - mni\n",
    "    \n",
    "bq = array ([Algorithm.SHELLP0, Algorithm.SHELLP1, Algorithm.SHELLP2, \n",
    "             Algorithm.SHELLN0, Algorithm.SHELLN1, Algorithm.SHELLN2])\n",
    "    \n",
    "bv = array ([vrpc, vrpi, vrpo, vrnc, vrni, vrno])\n",
    "    \n",
    "bm = array ([mpc, mpi, mpo, mnc, mni, mno])\n",
    "\n",
    "# Calculation of the charge in the electric charges of an electron for the\n",
    "# core and shells of the \"u\" and \"d\" quarks.\n",
    "# The numbers from [0] to [2] refer to the \"u\" quark.\n",
    "# The numbers from [3] to [5] refer to the \"d\" quark.\n",
    "xq02 = linalg.solve(a02, bq)\n",
    "xq13 = linalg.solve(a13, bq)\n",
    "\n",
    "# Calculation of volume for core and shells of the \"u\" and \"d\" quarks.\n",
    "# The numbers from [0] to [2] refer to the \"u\" quark.\n",
    "# The numbers from [3] to [5] refer to the \"d\" quark.\n",
    "xv02 = linalg.solve(a02, bv)\n",
    "xv13 = linalg.solve(a13, bv)\n",
    "\n",
    "# Calculation of mass for core and shells of the \"u\" and \"d\" quarks.\n",
    "# The numbers from [0] to [2] refer to the \"u\" quark.\n",
    "# The numbers from [3] to [5] refer to the \"d\" quark.\n",
    "xm02 = linalg.solve(a02, bm)\n",
    "xm13 = linalg.solve(a13, bm)\n",
    "\n",
    "# Calculation of the charge for the core and shells of the \"u\" and \"d\" \n",
    "#quarks.\n",
    "# The numbers from [0] to [2] refer to the \"u\" quark.\n",
    "# The numbers from [3] to [5] refer to the \"d\" quark.\n",
    "for i, item in enumerate(xq02):\n",
    "    xq02[i] *= Algorithm.qe\n",
    "    \n",
    "for i, item in enumerate(xq13):\n",
    "    xq13[i] *= Algorithm.qe\n",
    "\n",
    "unit = Algorithm(xq02, xq13, xv02, xv13, xm02, xm13)\n",
    "\n",
    "\"\"\"Preparation of a data set for a protons, and neutrons\"\"\"\n",
    "\"\"\"Calculating tachyon values\"\"\"\n",
    "\n",
    "class Particles():\n",
    "    def __init__ (self, proton0, proton1, neutron0, neutron1, tachyon_charge,\n",
    "                 tachyon_mass, tachyon_volume):\n",
    "        self.proton0 = proton0\n",
    "        self.proton1 = proton1\n",
    "        self.neutron0 = neutron0\n",
    "        self.neutron1 = neutron1\n",
    "        self.tachyon_charge = tachyon_charge\n",
    "        self.tachyon_mass = tachyon_mass\n",
    "        self.tachyon_volume = tachyon_volume        \n",
    "        \n",
    "# Matrices from a0 to a3 from the Algorithm class are used to form a data set\n",
    "# for protons, and neutrons. \n",
    "# The x...02 values are used for the matrices a0 and a2.\n",
    "# The x...13 values are used for the matrices a1 and a3.\n",
    "Proton2 = namedtuple('Proton2', 'name1 charge name2 mass name3 volume')\n",
    "\n",
    "proton0 = [[1, 'pq1', unit.xq02[0], 'pm1', unit.xm02[0], 'pv1', unit.xv02[0]],\n",
    "           [2, 'pq2', unit.xq02[1], 'pm2', unit.xm02[1], 'pv2', unit.xv02[1]],\n",
    "           [3, 'pq3', unit.xq02[0], 'pm3', unit.xm02[0], 'pv3', unit.xv02[0]],\n",
    "           [4, 'pq4', unit.xq02[2], 'pm4', unit.xm02[2], 'pv4', unit.xv02[2]],\n",
    "           [5, 'pq5', unit.xq02[1], 'pm5', unit.xm02[1], 'pv5', unit.xv02[1]],           \n",
    "           [6, 'pq6', unit.xq02[3], 'pm6', unit.xm02[3], 'pv6', unit.xv02[3]],           \n",
    "           [7, 'pq7', unit.xq02[2], 'pm7', unit.xm02[2], 'pv7', unit.xv02[2]],           \n",
    "           [8, 'pq8', unit.xq02[4], 'pm8', unit.xm02[4], 'pv8', unit.xv02[4]],\n",
    "           [9, 'pq9', unit.xq02[5], 'pm9', unit.xm02[5], 'pv9', unit.xv02[5]]] \n",
    "\n",
    "table3 = PrettyTable(['#', 'Charge sym.', 'Charge in Cl', 'Mass sym.',\n",
    "                      'Mass in kg.', 'Volume sym.', 'Volume in cbm'])\n",
    "\n",
    "for rec in proton0:\n",
    "    table3.add_row(rec) \n",
    "\n",
    "Proton = namedtuple('Proton', 'name1 charge name2 mass name3 volume')\n",
    "proton1 = [[1, 'pq1', unit.xq13[0], 'pm1', unit.xm13[0], 'pv1', unit.xv13[0]], \n",
    "           [2, 'pq2', unit.xq13[1], 'pm2', unit.xm13[1], 'pv2', unit.xv13[1]], \n",
    "           [3, 'pq3', unit.xq13[3], 'pm3', unit.xm13[3], 'pv3', unit.xv13[3]],\n",
    "           [4, 'pq4', unit.xq13[2], 'pm4', unit.xm13[2], 'pv4', unit.xv13[2]],\n",
    "           [5, 'pq5', unit.xq13[4], 'pm5', unit.xm13[4], 'pv5', unit.xv13[4]],           \n",
    "           [6, 'pq6', unit.xq13[0], 'pm6', unit.xm13[0], 'pv6', unit.xv13[0]],\n",
    "           [7, 'pq7', unit.xq13[5], 'pm7', unit.xm13[5], 'pv7', unit.xv13[5]],           \n",
    "           [8, 'pq8', unit.xq13[1], 'pm8', unit.xm13[1], 'pv8', unit.xv13[1]],\n",
    "           [9, 'pq9', unit.xq13[2], 'pm9', unit.xm13[2], 'pv9', unit.xv13[2]]] \n",
    "\n",
    "table4 = PrettyTable(['#', 'Charge sym.', 'Charge in Cl', 'Mass sym.',\n",
    "                      'Mass in kg.', 'Volume sym.', 'Volume in cbm'])\n",
    "for rec in proton1:\n",
    "    table4.add_row(rec)\n",
    "\n",
    "Neutron2 = namedtuple('Neutron2', 'name1 charge name2 mass name3 volume')\n",
    "neutron0 = [[1, 'nq1', unit.xq02[3], 'nm1', unit.xm02[3], 'nv1', unit.xv02[3]], \n",
    "            [2, 'nq2', unit.xq02[4], 'nm2', unit.xm02[4], 'nv2', unit.xv02[4]],\n",
    "            [3, 'nq3', unit.xq02[3], 'nm3', unit.xm02[3], 'nv3', unit.xv02[3]],\n",
    "            [4, 'nq4', unit.xq02[5], 'nm4', unit.xm02[5], 'nv4', unit.xv02[5]],\n",
    "            [5, 'nq5', unit.xq02[4], 'nm5', unit.xm02[4], 'nv5', unit.xv02[4]],            \n",
    "            [6, 'nq6', unit.xq02[0], 'nm6', unit.xm02[0], 'nv6', unit.xv02[0]],\n",
    "            [7, 'nq7', unit.xq02[4], 'nm7', unit.xm02[4], 'nv7', unit.xv02[4]],            \n",
    "            [8, 'nq8', unit.xq02[1], 'nm8', unit.xm02[1], 'nv8', unit.xv02[1]],\n",
    "            [9, 'nq9', unit.xq02[2], 'nm9', unit.xm02[2], 'nv9', unit.xv02[2]]]\n",
    "\n",
    "table5 = PrettyTable(['#', 'Charge sym.', 'Charge in Cl', 'Mass sym.',\n",
    "                      'Mass in kg.', 'Volume sym.', 'Volume in cbm'])\n",
    "for rec in neutron0:\n",
    "    table5.add_row(rec)\n",
    "\n",
    "Neutron = namedtuple('Neutron', 'name1 charge name2 mass name3 volume')    \n",
    "neutron1 = [[1, 'nq1', unit.xq13[3], 'nm1', unit.xm13[3], 'nv1', unit.xv13[3]], \n",
    "            [2, 'nq2', unit.xq13[4], 'nm2', unit.xm13[4], 'nv2', unit.xv13[4]], \n",
    "            [3, 'nq3', unit.xq13[0], 'nm3', unit.xm13[0], 'nv3', unit.xv13[0]],\n",
    "            [4, 'nq4', unit.xq13[5], 'nm4', unit.xm13[5], 'nv4', unit.xv13[5]],\n",
    "            [5, 'nq5', unit.xq13[1], 'nm5', unit.xm13[1], 'nv5', unit.xv13[1]],\n",
    "            [6, 'nq6', unit.xq13[3], 'nm6', unit.xm13[3], 'nv6', unit.xv13[3]],            \n",
    "            [7, 'nq7', unit.xq13[2], 'nm7', unit.xm13[2], 'nv7', unit.xv13[2]],\n",
    "            [8, 'nq8', unit.xq13[4], 'nm8', unit.xm13[4], 'nv8', unit.xv13[4]],\n",
    "            [9, 'nq9', unit.xq13[5], 'nm9', unit.xm13[5], 'nv9', unit.xv13[5]]]\n",
    "\n",
    "table6 = PrettyTable(['#', 'Charge sym.', 'Charge in Cl', 'Mass sym.',\n",
    "                      'Mass in kg.', 'Volume sym.', 'Volume in cbm'])\n",
    "for rec in neutron1:\n",
    "    table6.add_row(rec)\n",
    "\n",
    "proton0 = list(zip(* proton0))\n",
    "proton1 = list(zip(* proton1))\n",
    "neutron0 = list(zip(* neutron0))\n",
    "neutron1 = list(zip(* neutron1))\n",
    "\n",
    "\"\"\"Algorithm for finding tachyon\"\"\" \n",
    "\n",
    "proton0_min_charge = min((proton0)[2], key=abs)\n",
    "proton1_min_charge = min((proton1)[2], key=abs)\n",
    "neutron0_min_charge = min((neutron0)[2], key=abs)\n",
    "neutron1_min_charge = min((neutron1)[2], key=abs)\n",
    "\n",
    "# Let's compare the minimum values of charges in protons, and neutrons, \n",
    "# and find the value of a tachyon\n",
    "\n",
    "if (proton0_min_charge == neutron0_min_charge and  \n",
    "    proton1_min_charge == neutron1_min_charge and \n",
    "    proton0_min_charge == proton1_min_charge):    \n",
    "\n",
    "# ATTENTION! THE CYCLE DOES NOT CONTAIN A FORCED INTERRUPTION.\n",
    "   \n",
    "    a = proton0_min_charge\n",
    "    b = unit.qe2\n",
    "    while a != b:\n",
    "        if a > b:\n",
    "            a = a - b\n",
    "        else:\n",
    "            b = b - a\n",
    "\n",
    "# Electric charge of the tachyon.\n",
    "tachyon_charge = a\n",
    "        \n",
    "# Find the mass of a tachyon.\n",
    "tachyon_mass = unit.me/(unit.qe2/tachyon_charge)\n",
    " \n",
    "# Minimum_volume tachyon. \n",
    "tachyon_volume = ve/(unit.qe2/tachyon_charge)\n",
    "\n",
    "# Let's define protons, and neutrons, through the definition\n",
    "# of electric charge.\n",
    "\n",
    "if (sum(neutron0[2]) > sum(neutron1[2]) and sum(proton0[2]) == sum(proton1[2])): \n",
    "    neutron = neutron1 \n",
    "    new_neutron = neutron0 \n",
    "    proton = proton1 \n",
    "    new_proton = proton0\n",
    "else:\n",
    "    print('Algorithm requires verification.')     \n",
    "\n",
    "unit1 = Particles(proton0, proton1, neutron0, neutron1, tachyon_charge,\n",
    "                 tachyon_mass, tachyon_volume)\n",
    "\n",
    "tachyon_electrical_charge = [[1, 'Electric charge \\n', unit1.tachyon_charge],\n",
    "                              [2, 'Mass \\n', unit1.tachyon_mass],\n",
    "                              [3, 'Volume', unit1.tachyon_volume]]\n",
    "table7 = PrettyTable(['#', 'Description', 'Design data'])\n",
    "\n",
    "for rec in tachyon_electrical_charge:\n",
    "                              table7.add_row(rec)       \n",
    "\n",
    "# The distribution of characteristics for protons, neutrons over time segments\n",
    "\n",
    "# Neutron \n",
    "\n",
    "NEUTRON_Present_V = (unit.xv02[5] + unit.xv02[0] + unit.xv02[2])\n",
    "NEUTRON_Past_V = (unit.xv02[3] + unit.xv02[3] + unit.xv02[1])\n",
    "NEUTRON_Future_V = (unit.xv02[4] + unit.xv02[4] + unit.xv02[4])\n",
    "    \n",
    "NEUTRON_Present_Q = (unit.xq02[5] + unit.xq02[0] + unit.xq02[2])\n",
    "NEUTRON_Past_Q = (unit.xq02[3] + unit.xq02[3] + unit.xq02[1])\n",
    "NEUTRON_Future_Q = (unit.xq02[4] + unit.xq02[4] + unit.xq02[4])\n",
    "    \n",
    "NEUTRON_Present_M = (unit.xm02[5] + unit.xm02[0] + unit.xm02[2])\n",
    "NEUTRON_Past_M = (unit.xm02[3] + unit.xm02[3] + unit.xm02[1])\n",
    "NEUTRON_Future_M = (unit.xm02[4] + unit.xm02[4] + unit.xm02[4])\n",
    "\n",
    "# Proton\n",
    " \n",
    "PROTON_Present_V = (unit.xv02[0] + unit.xv02[0] + unit.xv02[2] + \n",
    "                    unit.xv02[2] + unit.xv02[5])\n",
    "PROTON_Past_V = (unit.xv02[1] + unit.xv02[1] + unit.xv02[3])\n",
    "PROTON_Future_V = (unit.xv02[4])\n",
    "    \n",
    "PROTON_Present_Q = (unit.xq02[0] + unit.xq02[0] + unit.xq02[2] + \n",
    "                    unit.xq02[2] + unit.xq02[5])\n",
    "PROTON_Past_Q = (unit.xq02[1] + unit.xq02[1] + unit.xq02[3])\n",
    "PROTON_Future_Q = unit.xq02[4]\n",
    "    \n",
    "PROTON_Present_M = (unit.xm02[0] + unit.xm02[0] + unit.xm02[2] + \n",
    "                    unit.xm02[2] + unit.xm02[5])\n",
    "PROTON_Past_M = (unit.xm02[1] + unit.xm02[1] + unit.xm02[3])\n",
    "PROTON_Future_M = unit.xm02[4]\n",
    "\n",
    "# Neutron2 \n",
    "\n",
    "NEUTRON2_Present_V = (unit.xv13[3] + unit.xv13[5] + unit.xv13[3] + \n",
    "                      unit.xv13[2] + unit.xv13[5])\n",
    "NEUTRON2_Past_V = (unit.xv13[4] + unit.xv13[4])\n",
    "NEUTRON2_Future_V = (unit.xv13[0] + unit.xv13[1])\n",
    "    \n",
    "NEUTRON2_Present_Q = (unit.xq13[3] + unit.xq13[5] + unit.xq13[3] + \n",
    "                      unit.xq13[2] + unit.xq13[5])\n",
    "NEUTRON2_Past_Q = (unit.xq13[4] + unit.xq13[4])\n",
    "NEUTRON2_Future_Q = (unit.xq13[0] + unit.xq13[1])\n",
    "    \n",
    "NEUTRON2_Present_M = (unit.xm13[3] + unit.xm13[5] + unit.xm13[3] + \n",
    "                      unit.xm13[2] + unit.xm13[5])\n",
    "NEUTRON2_Past_M = (unit.xm13[4] + unit.xm13[4])\n",
    "NEUTRON2_Future_M = (unit.xm13[0] + unit.xm13[1])\n",
    "\n",
    "# Proton2\n",
    " \n",
    "PROTON2_Present_V = (unit.xv13[3] + unit.xv13[2] + unit.xv13[5] + unit.xv13[2]) \n",
    "PROTON2_Past_V = unit.xv13[4] \n",
    "PROTON2_Future_V = (unit.xv13[0] + unit.xv13[1] + unit.xv13[0] + unit.xv13[1])\n",
    "    \n",
    "PROTON2_Present_Q = (unit.xq13[3] + unit.xq13[2] + unit.xq13[5] + unit.xq13[2])\n",
    "PROTON2_Past_Q = unit.xq13[4]\n",
    "PROTON2_Future_Q = (unit.xq13[0] + unit.xq13[1] + unit.xq13[0] + unit.xq13[1])\n",
    "    \n",
    "PROTON2_Present_M = (unit.xm13[3] + unit.xm13[2] + unit.xm13[5] + unit.xm13[2])\n",
    "PROTON2_Past_M = unit.xm13[4]\n",
    "PROTON2_Future_M = (unit.xm13[0] + unit.xm13[1] + unit.xm13[0] + unit.xm13[1])                      \n",
    "                        \n",
    "class Tachion():   \n",
    "# The class makes calculations for protons, neutrons, \n",
    "# taking into account tachyons\n",
    "\n",
    "# The distribution for protons, neutrons over time segments is constant\n",
    "\n",
    "# Neutron \n",
    "\n",
    "    NEUTRON_Present_V \n",
    "    NEUTRON_Past_V \n",
    "    NEUTRON_Future_V \n",
    "    \n",
    "    NEUTRON_Present_Q \n",
    "    NEUTRON_Past_Q \n",
    "    NEUTRON_Future_Q \n",
    "    \n",
    "    NEUTRON_Present_M \n",
    "    NEUTRON_Past_M \n",
    "    NEUTRON_Future_M \n",
    "\n",
    "# Proton\n",
    " \n",
    "    PROTON_Present_V \n",
    "    PROTON_Past_V \n",
    "    PROTON_Future_V \n",
    "    \n",
    "    PROTON_Present_Q \n",
    "    PROTON_Past_Q \n",
    "    PROTON_Future_Q \n",
    "    \n",
    "    PROTON_Present_M \n",
    "    PROTON_Past_M \n",
    "    PROTON_Future_M \n",
    "\n",
    "# Neutron2 \n",
    "\n",
    "    NEUTRON2_Present_V \n",
    "    NEUTRON2_Past_V \n",
    "    NEUTRON2_Future_V \n",
    "    \n",
    "    NEUTRON2_Present_Q \n",
    "    NEUTRON2_Past_Q \n",
    "    NEUTRON2_Future_Q \n",
    "    \n",
    "    NEUTRON2_Present_M \n",
    "    NEUTRON2_Past_M \n",
    "    NEUTRON2_Future_M \n",
    "\n",
    "# Proton2\n",
    " \n",
    "    PROTON2_Present_V  \n",
    "    PROTON2_Past_V \n",
    "    PROTON2_Future_V \n",
    "    \n",
    "    PROTON2_Present_Q \n",
    "    PROTON2_Past_Q \n",
    "    PROTON2_Future_Q \n",
    "    \n",
    "    PROTON2_Present_M \n",
    "    PROTON2_Past_M \n",
    "    PROTON2_Future_M \n",
    "    \n",
    "    def __init__ (self, neutron_present_tachyon_quantity, neutron_future_tachyon_quantity, \n",
    "                  neutron_present_tachyon_mass, neutron_future_tachyon_mass,\n",
    "                  neutron_present_withouttachyon_mass, neutron_future_withouttachyon_mass,\n",
    "                  neutron_present_withouttachyon_energy, neutron_future_withouttachyon_energy,\n",
    "                  neutron_present_at1tachyon_energy, neutron_future_at1tachyon_energy,\n",
    "                  \n",
    "                  proton_present_tachyon_quantity, proton_future_tachyon_quantity, \n",
    "                  proton_present_tachyon_mass, proton_future_tachyon_mass,\n",
    "                  proton_present_withouttachyon_mass, proton_future_withouttachyon_mass,\n",
    "                  proton_present_withouttachyon_energy, proton_future_withouttachyon_energy,\n",
    "                  proton_present_at1tachyon_energy, proton_future_at1tachyon_energy,\n",
    "                  \n",
    "                  neutron2_present_tachyon_quantity, neutron2_future_tachyon_quantity, \n",
    "                  neutron2_present_tachyon_mass, neutron2_future_tachyon_mass,\n",
    "                  neutron2_present_withouttachyon_mass, neutron2_future_withouttachyon_mass,\n",
    "                  neutron2_present_withouttachyon_energy, neutron2_future_withouttachyon_energy,\n",
    "                  neutron2_present_at1tachyon_energy, neutron2_future_at1tachyon_energy,\n",
    "                  \n",
    "                  proton2_present_tachyon_quantity, proton2_future_tachyon_quantity, \n",
    "                  proton2_present_tachyon_mass, proton2_future_tachyon_mass,\n",
    "                  proton2_present_withouttachyon_mass, proton2_future_withouttachyon_mass,\n",
    "                  proton2_present_withouttachyon_energy, proton2_future_withouttachyon_energy,\n",
    "                  proton2_present_at1tachyon_energy, proton2_future_at1tachyon_energy):\n",
    "        \n",
    "        self.neutron_present_tachyon_quantity = neutron_present_tachyon_quantity\n",
    "        self.neutron_future_tachyon_quantity = neutron_future_tachyon_quantity\n",
    "        self.neutron_present_tachyon_mass = neutron_present_tachyon_mass\n",
    "        self.neutron_future_tachyon_mass = neutron_future_tachyon_mass\n",
    "        self.neutron_present_withouttachyon_mass = neutron_present_withouttachyon_mass\n",
    "        self.neutron_future_withouttachyon_mass = neutron_future_withouttachyon_mass\n",
    "        self.neutron_present_withouttachyon_energy = neutron_present_withouttachyon_energy\n",
    "        self.neutron_future_withouttachyon_energy = neutron_future_withouttachyon_energy\n",
    "        self.neutron_present_at1tachyon_energy = neutron_present_at1tachyon_energy\n",
    "        self.neutron_future_at1tachyon_energy = neutron_future_at1tachyon_energy\n",
    "        \n",
    "        self.proton_present_tachyon_quantity = proton_present_tachyon_quantity\n",
    "        self.proton_future_tachyon_quantity = proton_future_tachyon_quantity\n",
    "        self.proton_present_tachyon_mass = proton_present_tachyon_mass\n",
    "        self.proton_future_tachyon_mass = proton_future_tachyon_mass\n",
    "        self.proton_present_withouttachyon_mass = proton_present_withouttachyon_mass\n",
    "        self.proton_future_withouttachyon_mass = proton_future_withouttachyon_mass\n",
    "        self.proton_present_withouttachyon_energy = proton_present_withouttachyon_energy\n",
    "        self.proton_future_withouttachyon_energy = proton_future_withouttachyon_energy\n",
    "        self.proton_present_at1tachyon_energy = proton_present_at1tachyon_energy\n",
    "        self.proton_future_at1tachyon_energy = proton_future_at1tachyon_energy\n",
    "        \n",
    "        self.neutron2_present_tachyon_quantity = neutron2_present_tachyon_quantity\n",
    "        self.neutron2_future_tachyon_quantity = neutron2_future_tachyon_quantity\n",
    "        self.neutron2_present_tachyon_mass = neutron2_present_tachyon_mass\n",
    "        self.neutron2_future_tachyon_mass = neutron2_future_tachyon_mass\n",
    "        self.neutron2_present_withouttachyon_mass = neutron2_present_withouttachyon_mass\n",
    "        self.neutron2_future_withouttachyon_mass = neutron2_future_withouttachyon_mass\n",
    "        self.neutron2_present_withouttachyon_energy = neutron2_present_withouttachyon_energy\n",
    "        self.neutron2_future_withouttachyon_energy = neutron2_future_withouttachyon_energy\n",
    "        self.neutron2_present_at1tachyon_energy = neutron2_present_at1tachyon_energy\n",
    "        self.neutron2_future_at1tachyon_energy = neutron2_future_at1tachyon_energy\n",
    "        \n",
    "        self.proton2_present_tachyon_quantity = proton2_present_tachyon_quantity\n",
    "        self.proton2_future_tachyon_quantity = proton2_future_tachyon_quantity\n",
    "        self.proton2_present_tachyon_mass = proton2_present_tachyon_mass\n",
    "        self.proton2_future_tachyon_mass = proton2_future_tachyon_mass\n",
    "        self.proton2_present_withouttachyon_mass = proton2_present_withouttachyon_mass\n",
    "        self.proton2_future_withouttachyon_mass = proton2_future_withouttachyon_mass\n",
    "        self.proton2_present_withouttachyon_energy = proton2_present_withouttachyon_energy\n",
    "        self.proton2_future_withouttachyon_energy = proton2_future_withouttachyon_energy\n",
    "        self.proton2_present_at1tachyon_energy = proton2_present_at1tachyon_energy\n",
    "        self.proton2_future_at1tachyon_energy = proton2_future_at1tachyon_energy\n",
    "        \n",
    "# We calculate the maximum possible number of tachyon\n",
    "neutron_present_tachyon_quantity = NEUTRON_Present_Q/unit1.tachyon_charge\n",
    "neutron_future_tachyon_quantity = NEUTRON_Future_Q/unit1.tachyon_charge\n",
    "\n",
    "proton_present_tachyon_quantity = PROTON_Present_Q/unit1.tachyon_charge\n",
    "proton_future_tachyon_quantity = PROTON_Future_Q/unit1.tachyon_charge\n",
    "\n",
    "neutron2_present_tachyon_quantity = NEUTRON2_Present_Q/unit1.tachyon_charge\n",
    "neutron2_future_tachyon_quantity = NEUTRON2_Future_Q/unit1.tachyon_charge\n",
    "\n",
    "proton2_present_tachyon_quantity = PROTON2_Present_Q/unit1.tachyon_charge\n",
    "proton2_future_tachyon_quantity = PROTON2_Future_Q/unit1.tachyon_charge\n",
    "\n",
    "# Determine the mass of tachyons in the segment\n",
    "neutron_present_tachyon_mass = neutron_present_tachyon_quantity * unit1.tachyon_mass\n",
    "neutron_future_tachyon_mass = neutron_future_tachyon_quantity * unit1.tachyon_mass\n",
    "\n",
    "proton_present_tachyon_mass = proton_present_tachyon_quantity * unit1.tachyon_mass\n",
    "proton_future_tachyon_mass = proton_future_tachyon_quantity * unit1.tachyon_mass\n",
    "\n",
    "neutron2_present_tachyon_mass = neutron2_present_tachyon_quantity * unit1.tachyon_mass\n",
    "neutron2_future_tachyon_mass = neutron2_future_tachyon_quantity * unit1.tachyon_mass\n",
    "\n",
    "proton2_present_tachyon_mass = proton2_present_tachyon_quantity * unit1.tachyon_mass\n",
    "proton2_future_tachyon_mass = proton2_future_tachyon_quantity * unit1.tachyon_mass\n",
    "\n",
    "# Determine the mass of the segment without tachyons\n",
    "neutron_present_withouttachyon_mass = NEUTRON_Present_M - neutron_present_tachyon_mass\n",
    "neutron_future_withouttachyon_mass = NEUTRON_Future_M - neutron_future_tachyon_mass\n",
    "\n",
    "proton_present_withouttachyon_mass = PROTON_Present_M - proton_present_tachyon_mass\n",
    "proton_future_withouttachyon_mass = PROTON_Future_M - proton_future_tachyon_mass\n",
    "\n",
    "neutron2_present_withouttachyon_mass = NEUTRON2_Present_M - neutron_present_tachyon_mass\n",
    "neutron2_future_withouttachyon_mass = NEUTRON2_Future_M - neutron_future_tachyon_mass\n",
    "\n",
    "proton2_present_withouttachyon_mass = PROTON2_Present_M - proton_present_tachyon_mass\n",
    "proton2_future_withouttachyon_mass = PROTON2_Future_M - proton_future_tachyon_mass\n",
    "\n",
    "# We calculate the amount of energy in a segment without taking into account tachyons\n",
    "neutron_present_withouttachyon_energy = neutron_present_withouttachyon_mass * Algorithm.constantc ** 2 \n",
    "neutron_future_withouttachyon_energy = neutron_future_withouttachyon_mass * Algorithm.constantc ** 2 \n",
    "\n",
    "proton_present_withouttachyon_energy = proton_present_withouttachyon_mass * Algorithm.constantc ** 2 \n",
    "proton_future_withouttachyon_energy = proton_future_withouttachyon_mass * Algorithm.constantc ** 2\n",
    "\n",
    "neutron2_present_withouttachyon_energy = neutron2_present_withouttachyon_mass * Algorithm.constantc ** 2 \n",
    "neutron2_future_withouttachyon_energy = neutron2_future_withouttachyon_mass * Algorithm.constantc ** 2 \n",
    "\n",
    "proton2_present_withouttachyon_energy = proton2_present_withouttachyon_mass * Algorithm.constantc ** 2 \n",
    "proton2_future_withouttachyon_energy = proton2_future_withouttachyon_mass * Algorithm.constantc ** 2\n",
    "\n",
    "# We calculate the amount of energy in a segment of one tachyon\n",
    "neutron_present_at1tachyon_energy = neutron_present_withouttachyon_energy/neutron_present_tachyon_quantity\n",
    "neutron_future_at1tachyon_energy = neutron_future_withouttachyon_energy/neutron_future_tachyon_quantity\n",
    "\n",
    "proton_present_at1tachyon_energy = proton_present_withouttachyon_energy/proton_present_tachyon_quantity\n",
    "proton_future_at1tachyon_energy = proton_future_withouttachyon_energy/proton_future_tachyon_quantity\n",
    "\n",
    "neutron2_present_at1tachyon_energy = neutron2_present_withouttachyon_energy/neutron2_present_tachyon_quantity\n",
    "neutron2_future_at1tachyon_energy = neutron2_future_withouttachyon_energy/neutron2_future_tachyon_quantity\n",
    "\n",
    "proton2_present_at1tachyon_energy = proton2_present_withouttachyon_energy/proton2_present_tachyon_quantity\n",
    "proton2_future_at1tachyon_energy = proton2_future_withouttachyon_energy/proton2_future_tachyon_quantity\n",
    "\n",
    "unit2 = Tachion(neutron_present_tachyon_quantity, neutron_future_tachyon_quantity, \n",
    "                neutron_present_tachyon_mass, neutron_future_tachyon_mass,\n",
    "                neutron_present_withouttachyon_mass, neutron_future_withouttachyon_mass,\n",
    "                neutron_present_withouttachyon_energy, neutron_future_withouttachyon_energy,\n",
    "                neutron_present_at1tachyon_energy, neutron_future_at1tachyon_energy,\n",
    "                \n",
    "                proton_present_tachyon_quantity, proton_future_tachyon_quantity, \n",
    "                proton_present_tachyon_mass, proton_future_tachyon_mass,\n",
    "                proton_present_withouttachyon_mass, proton_future_withouttachyon_mass,\n",
    "                proton_present_withouttachyon_energy, proton_future_withouttachyon_energy,\n",
    "                proton_present_at1tachyon_energy, proton_future_at1tachyon_energy,\n",
    "                \n",
    "                neutron2_present_tachyon_quantity, neutron2_future_tachyon_quantity, \n",
    "                neutron2_present_tachyon_mass, neutron2_future_tachyon_mass,\n",
    "                neutron2_present_withouttachyon_mass, neutron2_future_withouttachyon_mass,\n",
    "                neutron2_present_withouttachyon_energy, neutron2_future_withouttachyon_energy,\n",
    "                neutron2_present_at1tachyon_energy, neutron2_future_at1tachyon_energy,\n",
    "                \n",
    "                proton2_present_tachyon_quantity, proton2_future_tachyon_quantity, \n",
    "                proton2_present_tachyon_mass, proton2_future_tachyon_mass,\n",
    "                proton2_present_withouttachyon_mass, proton2_future_withouttachyon_mass,\n",
    "                proton2_present_withouttachyon_energy, proton2_future_withouttachyon_energy,\n",
    "                proton2_present_at1tachyon_energy, proton2_future_at1tachyon_energy)\n",
    "\n",
    "# Table for Neutron_time_segments\n",
    "Neutron_time_segments = namedtuple('Particle', 'name1 charge name2 mass name3 volume')\n",
    "\n",
    "neutron_time_segments = [[1, 'Present', NEUTRON_Present_Q, 'Present', NEUTRON_Present_M, 'Present', NEUTRON_Present_V],\n",
    "                          [2, 'Past', NEUTRON_Past_Q, 'Past', NEUTRON_Past_M, 'Past', NEUTRON_Past_V],\n",
    "                          [3, 'Future', NEUTRON_Future_Q, 'Future', NEUTRON_Future_M, 'Future', NEUTRON_Future_V]]\n",
    "                      \n",
    "table8 = PrettyTable(['#', 'Charge', 'Charge in Cl', 'Mass',\n",
    "                      'Mass in kg.', 'Volume', 'Volume in cbm'])\n",
    "\n",
    "for rec in neutron_time_segments:\n",
    "    table8.add_row(rec)  \n",
    "    \n",
    "# Table for Proton_time_segments\n",
    "Proton_time_segments = namedtuple('Particle', 'name1 charge name2 mass name3 volume')\n",
    "\n",
    "proton_time_segments = [[1, 'Present', PROTON_Present_Q, 'Present', PROTON_Present_M, 'Present', PROTON_Present_V],\n",
    "                          [2, 'Past', PROTON_Past_Q, 'Past', PROTON_Past_M, 'Past', PROTON_Past_V],\n",
    "                          [3, 'Future', PROTON_Future_Q, 'Future', PROTON_Future_M, 'Future', PROTON_Future_V]]\n",
    "                      \n",
    "table9 = PrettyTable(['#', 'Charge', 'Charge in Cl', 'Mass',\n",
    "                      'Mass in kg.', 'Volume', 'Volume in cbm'])\n",
    "\n",
    "for rec in proton_time_segments:\n",
    "    table9.add_row(rec) \n",
    "    \n",
    "# Table for Neutron2_time_segments    \n",
    "Neutron2_time_segments = namedtuple('Particle', 'name1 charge name2 mass name3 volume')\n",
    "\n",
    "neutron2_time_segments = [[1, 'Present', NEUTRON2_Present_Q, 'Present', NEUTRON2_Present_M, 'Present', NEUTRON2_Present_V],\n",
    "                          [2, 'Past', NEUTRON2_Past_Q, 'Past', NEUTRON2_Past_M, 'Past', NEUTRON2_Past_V],\n",
    "                          [3, 'Future', NEUTRON2_Future_Q, 'Future', NEUTRON2_Future_M, 'Future', NEUTRON2_Future_V]]\n",
    "                      \n",
    "table10 = PrettyTable(['#', 'Charge', 'Charge in Cl', 'Mass',\n",
    "                      'Mass in kg.', 'Volume', 'Volume in cbm'])\n",
    "\n",
    "for rec in neutron2_time_segments:\n",
    "    table10.add_row(rec) \n",
    "    \n",
    "# Table for Proton2_time_segments    \n",
    "Proton2_time_segments = namedtuple('Particle', 'name1 charge name2 mass name3 volume')\n",
    "\n",
    "proton2_time_segments = [[1, 'Present', PROTON2_Present_Q, 'Present', PROTON2_Present_M, 'Present', PROTON2_Present_V],\n",
    "                          [2, 'Past', PROTON2_Past_Q, 'Past', PROTON2_Past_M, 'Past', PROTON2_Past_V],\n",
    "                          [3, 'Future', PROTON2_Future_Q, 'Future', PROTON2_Future_M, 'Future', PROTON2_Future_V]]\n",
    "                      \n",
    "table11 = PrettyTable(['#', 'Charge', 'Charge in Cl', 'Mass',\n",
    "                      'Mass in kg.', 'Volume', 'Volume in cbm'])\n",
    "\n",
    "for rec in proton2_time_segments:\n",
    "    table11.add_row(rec)   \n",
    "\n",
    "\"\"\"Analysis of the data obtained for protons, neutrons, tachyon.\"\"\"\n",
    "\n",
    "# Histograms for protons, neutrons\n",
    "# The histogram of the volume of shells of protons, neutrons\n",
    "np_par = [f\"P{i}\" for i in range(9)]\n",
    "width = 0.2\n",
    "x = np.arange(len(np_par))\n",
    "fig, ax = plt.subplots(figsize=(14,5))\n",
    "rects1 = ax.bar(x - width/4 -0.2, ([unit.xv02[0], unit.xv02[1], unit.xv02[0], unit.xv02[2], \n",
    "                                    unit.xv02[1], unit.xv02[3], unit.xv02[2], unit.xv02[4], \n",
    "                                    unit.xv02[5]]), width, label='proton2')\n",
    "rects2 = ax.bar(x + width/4 -0.2, ([unit.xv13[0], unit.xv13[1], unit.xv13[3], unit.xv13[2], \n",
    "                                    unit.xv13[4], unit.xv13[0], unit.xv13[5], unit.xv13[1],\n",
    "                                    unit.xv13[2]]), width, label='proton')\n",
    "rects3 = ax.bar(x - width/4 +0.2, ([unit.xv02[3], unit.xv02[4], unit.xv02[3], unit.xv02[5], \n",
    "                                    unit.xv02[4], unit.xv02[0], unit.xv02[4], unit.xv02[1],\n",
    "                                    unit.xv02[2]]), width, label='neutron2')\n",
    "rects4 = ax.bar(x + width/4 +0.2, ([unit.xv13[3], unit.xv13[4], unit.xv13[0], unit.xv13[5], \n",
    "                                    unit.xv13[1], unit.xv13[3], unit.xv13[2], unit.xv13[4], \n",
    "                                    unit.xv13[5]]), width, label='neutron')\n",
    "ax.set_title('The histogram of the volume of shells of protons, neutrons\\n'\n",
    "             'Graph#1', fontsize = 20)\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(np_par, fontsize = 14)\n",
    "ax.legend(fontsize = 14)\n",
    "\n",
    "# The histogram of the distribution of electric charge over the shells\\n' \n",
    "# for protons, neutrons.\n",
    "np_par = [f\"P{i}\" for i in range(9)]\n",
    "width = 0.2\n",
    "x = np.arange(len(np_par))\n",
    "fig, ax = plt.subplots(figsize=(14,5))\n",
    "rects1 = ax.bar(x - width/4 -0.2, ([unit.xq02[0], unit.xq02[1], unit.xq02[0], unit.xq02[2], \n",
    "                                    unit.xq02[1], unit.xq02[3], unit.xq02[2], unit.xq02[4], \n",
    "                                    unit.xq02[5]]), width, label='proton2')\n",
    "rects2 = ax.bar(x + width/4 -0.2, ([unit.xq13[0], unit.xq13[1], unit.xq13[3], unit.xq13[2], \n",
    "                                    unit.xq13[4], unit.xq13[0], unit.xq13[5], unit.xq13[1],\n",
    "                                    unit.xq13[2]]), width, label='proton')\n",
    "rects3 = ax.bar(x - width/4 +0.2, ([unit.xq02[3], unit.xq02[4], unit.xq02[3], unit.xq02[5], \n",
    "                                    unit.xq02[4], unit.xq02[0], unit.xq02[4], unit.xq02[1],\n",
    "                                    unit.xq02[2]]), width, label='neutron2')\n",
    "rects4 = ax.bar(x + width/4 +0.2, ([unit.xq13[3], unit.xq13[4], unit.xq13[0], unit.xq13[5], \n",
    "                                    unit.xq13[1], unit.xq13[3], unit.xq13[2], unit.xq13[4], \n",
    "                                    unit.xq13[5]]), width, label='neutron')\n",
    "ax.set_title('The histogram of the distribution of electric charge over the shells\\n' \n",
    "             'for protons, neutrons. Graph#2\\n', fontsize = 20)\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(np_par, fontsize = 14)\n",
    "ax.legend(fontsize = 14)\n",
    "\n",
    "# The histogram of the mass distribution over the shells\\n'\n",
    "# for protons, neutrons.\n",
    "np_par = [f\"P{i}\" for i in range(9)]\n",
    "width = 0.2\n",
    "x = np.arange(len(np_par))\n",
    "fig, ax = plt.subplots(figsize=(14,5))\n",
    "rects1 = ax.bar(x - width/4 -0.2, ([unit.xm02[0], unit.xm02[1], unit.xm02[0], unit.xm02[2], \n",
    "                                    unit.xm02[1], unit.xm02[3], unit.xm02[2], unit.xm02[4], \n",
    "                                    unit.xm02[5]]), width, label='proton2')\n",
    "rects2 = ax.bar(x + width/4 -0.2, ([unit.xm13[0], unit.xm13[1], unit.xm13[3], unit.xm13[2], \n",
    "                                    unit.xm13[4], unit.xm13[0], unit.xm13[5], unit.xm13[1],\n",
    "                                    unit.xm13[2]]), width, label='proton')\n",
    "rects3 = ax.bar(x - width/4 +0.2, ([unit.xm02[3], unit.xm02[4], unit.xm02[3], unit.xm02[5], \n",
    "                                    unit.xm02[4], unit.xm02[0], unit.xm02[4], unit.xm02[1],\n",
    "                                    unit.xm02[2]]), width, label='neutron2')\n",
    "rects4 = ax.bar(x + width/4 +0.2, ([unit.xm13[3], unit.xm13[4], unit.xm13[0], unit.xm13[5], \n",
    "                                    unit.xm13[1], unit.xm13[3], unit.xm13[2], unit.xm13[4], \n",
    "                                    unit.xm13[5]]), width, label='neutron')\n",
    "ax.set_title('The histogram of the mass distribution over the shells\\n'\n",
    "             'for protons, neutrons. Graph#3\\n', fontsize = 20)\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(np_par, fontsize = 14)\n",
    "ax.legend(fontsize = 14)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "# We will build pie charts based on the obtained data visualized using histograms.\n",
    "# The values of the protons, neutrons are the positive and negative volume.\n",
    "\n",
    "data_names = ['In the 3D space \\n', \n",
    "              'In the invariant space \\n']\n",
    "data_names2 = ['In the 3D space, Electric charge is positive \\n', \n",
    "               'In the invariant space, Electric charge is negative \\n']\n",
    "data_names3 = ['In the 3D space, Electric charge is positive \\n', \n",
    "               'In the invariant space, Electric charge is positive \\n']\n",
    "dpi = 80\n",
    "\n",
    "data_values = [(unit.xv02[0] + unit.xv02[0] + unit.xv02[2] + unit.xv02[2] + \n",
    "                unit.xv02[5]) * 10e45, \n",
    "               -(unit.xv02[1] + unit.xv02[1] + unit.xv02[3] + \n",
    "                 unit.xv02[4]) * 10e45]\n",
    "data_values2 = [(unit.xq02[0] + unit.xq02[0] + unit.xq02[2] + unit.xq02[2] + \n",
    "                 unit.xq02[5]) * 10e19, \n",
    "                -(unit.xq02[1] + unit.xq02[1] + unit.xq02[3] + \n",
    "                  unit.xq02[4]) * 10e19]\n",
    "data_values3 = [(unit.xm02[0] + unit.xm02[0] + unit.xm02[2] + unit.xm02[2] + \n",
    "                 unit.xm02[5]) * 10e28, \n",
    "                (unit.xm02[1] + unit.xm02[1] + unit.xm02[3] + \n",
    "                 unit.xm02[4]) * 10e28]\n",
    "data_values4 = [(unit.xv13[3] + unit.xv13[2] + unit.xv13[5] + unit.xv13[2]) * 10e45, \n",
    "                -(unit.xv13[0] + unit.xv13[1] + unit.xv13[4] + unit.xv13[0] + \n",
    "                  unit.xv13[1]) * 10e45]\n",
    "data_values5 = [(unit.xq13[3] + unit.xq13[2] + unit.xq13[5] + unit.xq13[2]) * 10e19, \n",
    "                (unit.xq13[0] + unit.xq13[1] + unit.xq13[4] + unit.xq13[0] + \n",
    "                 unit.xq13[1]) * 10e19]\n",
    "data_values6 = [(unit.xm13[3] + unit.xm13[2] + unit.xm13[5] + unit.xm13[2]) * 10e28, \n",
    "                (unit.xm13[0] + unit.xm13[1] + unit.xm13[4] + unit.xm13[0] + \n",
    "                 unit.xm13[1]) * 10e28]\n",
    "data_values7 = [(unit.xv02[5] + unit.xv02[0] + unit.xv02[2]) * 10e45, \n",
    "                -(unit.xv02[3] + unit.xv02[4] + unit.xv02[3] + unit.xv02[4] + \n",
    "                  unit.xv02[4] + unit.xv02[1]) * 10e45]\n",
    "data_values8 = [(unit.xq02[5] + unit.xq02[0] + unit.xq02[2]) * 10e19, \n",
    "                -(unit.xq02[3] + unit.xq02[4] + unit.xq02[3] + unit.xq02[4] + \n",
    "                 unit.xq02[4] + unit.xq02[1]) * 10e19]\n",
    "data_values9 = [(unit.xm02[5] + unit.xm02[0] + unit.xm02[2]) * 10e28, \n",
    "                (unit.xm02[3] + unit.xm02[4] + unit.xm02[3] + unit.xm02[4] + \n",
    "                 unit.xm02[4] + unit.xm02[1]) * 10e28]\n",
    "data_values10 = [(unit.xv13[3] + unit.xv13[5] + unit.xv13[3] + unit.xv13[2] + \n",
    "                  unit.xv13[5]) * 10e45, \n",
    "                 -(unit.xv13[4] + unit.xv13[0] + unit.xv13[1] + unit.xv13[4]) * 10e45]\n",
    "data_values11 = [(unit.xq13[3] + unit.xq13[5] + unit.xq13[3] + unit.xq13[2] + \n",
    "                  unit.xq13[5]) * 10e19, \n",
    "                 -(unit.xq13[4] + unit.xq13[0] + unit.xq13[1] + unit.xq13[4]) * 10e19]\n",
    "data_values12 = [(unit.xm13[3] + unit.xm13[5] + unit.xm13[3] + unit.xm13[2] + \n",
    "                  unit.xm13[5]) * 10e28, \n",
    "                 (unit.xm13[4] + unit.xm13[0] + unit.xm13[1] + unit.xm13[4]) * 10e28]\n",
    "\n",
    "fig = plt.figure(1, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for proton for volume \\n Graph#4\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "\n",
    "fig = plt.figure(2, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for proton for electric charge \\n Graph#5\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values2, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names2) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names2)\n",
    "\n",
    "fig = plt.figure(3, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for proton for mass \\n Graph#6\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values3, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "fig = plt.figure(4, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for proton 2 for volume \\n Graph#7\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values4, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.25, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "fig = plt.figure(5, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for proton 2 for electric charge \\n Graph#8\")\n",
    "\n",
    "xs = range(len(data_names3))\n",
    "\n",
    "plt.pie(data_values5, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names3) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names3)\n",
    "\n",
    "fig = plt.figure(6, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for proton 2 for mass \\n Graph#9\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values6, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "fig = plt.figure(7, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for neutron for volume \\n Graph#10\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values7, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.25, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "\n",
    "fig = plt.figure(8, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for neutron for electric charge \\n Graph#11\")\n",
    "\n",
    "xs = range(len(data_names2))\n",
    "\n",
    "plt.pie(data_values8, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names2) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names2)\n",
    "\n",
    "fig = plt.figure(9, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for neutron for mass \\n Graph#12\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values9, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "fig = plt.figure(10, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for neutron 2 for volume \\n Graph#13\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values10, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.25, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "\n",
    "fig = plt.figure(11, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for neutron 2 for electric charge \\n Graph#14\")\n",
    "\n",
    "xs = range(len(data_names2))\n",
    "\n",
    "plt.pie(data_values11, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names2) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names2)\n",
    "\n",
    "fig = plt.figure(12, dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title(\"Distribution to placement in spaces in (%) \\n\"\n",
    "              \"for neutron 2 for mass \\n Graph#15\")\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values12, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.31, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of proton, neutron\n",
    "\n",
    "# Time distribution of proton volume in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(PROTON_Present_V) * 10e46,\n",
    "               -(PROTON_Past_V) * 10e46, \n",
    "               -(PROTON_Future_V) * 10e46]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of proton volume in (%)\\n Graph#16')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of proton electric charge in (%)\n",
    "\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(PROTON_Present_Q) * 10e46,\n",
    "               -(PROTON_Past_Q) * 10e46, \n",
    "               (PROTON_Future_Q) * 10e46]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/ dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of proton electric charge in (%)\\n Graph#17')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of proton mass in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(PROTON_Present_M) * 10e46,\n",
    "               (PROTON_Past_M) * 10e46, \n",
    "               (PROTON_Future_M) * 10e46]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of proton mass in (%)\\n Graph#18')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of proton2 volume in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(PROTON2_Present_V) * 10e46,\n",
    "               -(PROTON2_Past_V) * 10e46, \n",
    "               -(PROTON2_Future_V) * 10e46]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of proton2 volume in (%)\\n Graph#19')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of proton2 electric charge in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(PROTON2_Present_Q) * 10e20,\n",
    "               -(PROTON2_Past_Q) * 10e20, \n",
    "               (PROTON2_Future_Q) * 10e20]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of proton2 electric charge in (%)\\n Graph#20')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)] )\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of proton2 mass in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(PROTON2_Present_M) * 10e29,\n",
    "               (PROTON2_Past_M) * 10e29, \n",
    "               (PROTON2_Future_M) * 10e29]\n",
    "\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of proton2 mass in (%)\\n Graph#21')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)] )\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of neutron volume in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(NEUTRON_Present_V) * 10e46,\n",
    "               -(NEUTRON_Past_V) * 10e46, \n",
    "               -(NEUTRON_Future_V) * 10e46]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of neutron volume in (%)\\n Graph#22')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of neutron electric charge in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(NEUTRON_Present_Q) * 10e20,\n",
    "               -(NEUTRON_Past_Q) * 10e20, \n",
    "               (NEUTRON_Future_Q) * 10e20]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of neutron electric charge in (%)\\n Graph#23')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.50, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of neutron mass in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(NEUTRON_Present_M) * 10e29,\n",
    "               (NEUTRON_Past_M) * 10e29, \n",
    "               (NEUTRON_Future_M) * 10e29]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of neutron mass in (%)\\n Graph#24')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)])\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of neutron2 volume in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(NEUTRON2_Present_V) * 10e46,\n",
    "               -(NEUTRON2_Past_V) * 10e46, \n",
    "               -(NEUTRON2_Future_V) * 10e46]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of neutron2 volume in (%)\\n Graph#25')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)] )\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of neutron2 electric charge in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(NEUTRON2_Present_Q) * 10e20,\n",
    "               -(NEUTRON2_Past_Q) * 10e20, \n",
    "               (NEUTRON2_Future_Q) * 10e20]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of neutron2 electric charge in (%)\\n Graph#26')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)] )\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.45, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Time distribution of neutron2 mass in (%)\n",
    "data_names = ['Present time \\n', \n",
    "              'Past time: \\n',\n",
    "              'Future']\n",
    "data_values = [(NEUTRON2_Present_M) * 10e29,\n",
    "               (NEUTRON2_Past_M) * 10e29, \n",
    "               (NEUTRON2_Future_M) * 10e29]\n",
    "dpi = 80\n",
    "fig = plt.figure(dpi = dpi, figsize = (512/dpi, 500/dpi))\n",
    "mpl.rcParams.update({'font.size': 14})\n",
    "\n",
    "plt.title('Time distribution of neutron2 mass in (%)\\n Graph#27')\n",
    "\n",
    "xs = range(len(data_names))\n",
    "\n",
    "plt.pie(data_values, autopct='%.1f', radius = 1.1,\n",
    "        explode = [0.15] + [0 for _ in range(len(data_names) - 1)] )\n",
    "plt.legend(bbox_to_anchor = (-0.16, 0.28, 0.25, 0.25),\n",
    "           loc = 'lower left', labels = data_names)\n",
    "\n",
    "# Demo graph comparing charge and mass from tachyon to neutron\n",
    "x = np.array([tachyon_mass, unit.me, unit.xm02[3] + unit.xm02[4] + \n",
    "              unit.xm02[3] + unit.xm02[5] + unit.xm02[4] + \n",
    "              unit.xm02[0] + unit.xm02[4] + unit.xm02[1] + \n",
    "              unit.xm02[2], unit.xm02[0] + unit.xm02[1] + \n",
    "              unit.xm02[0] + unit.xm02[2] + unit.xm02[1] + \n",
    "              unit.xm02[3] + unit.xm02[2] + unit.xm02[4] + \n",
    "              unit.xm02[5], unit.xm13[0] + unit.xm13[1] + \n",
    "              unit.xm13[3] + unit.xm13[2] + unit.xm13[4] + \n",
    "              unit.xm13[0] + unit.xm13[5] + unit.xm13[1] + \n",
    "              unit.xm13[2], unit.xm13[3] + unit.xm13[4] + \n",
    "              unit.xm13[0] + unit.xm13[5] + unit.xm13[1] + \n",
    "              unit.xm13[3] + unit.xm13[2] + unit.xm13[4] + \n",
    "              unit.xm13[5]])\n",
    "\n",
    "znp = np.array([tachyon_charge, -unit.qe, unit.xq02[3] + \n",
    "                unit.xq02[4] + unit.xq02[3] + unit.xq02[5] + \n",
    "                unit.xq02[4] + unit.xq02[0] + unit.xq02[4] + \n",
    "                unit.xq02[1] + unit.xq02[2] , unit.xq02[0] + \n",
    "                unit.xq02[1] + unit.xq02[0] + unit.xq02[2] + \n",
    "                unit.xq02[1] + unit.xq02[3] + unit.xq02[2] + \n",
    "                unit.xq02[4] + unit.xq02[5], unit.xq13[0] + \n",
    "                unit.xq13[1] + unit.xq13[3] + unit.xq13[2] + \n",
    "                unit.xq13[4] + unit.xq13[0] + unit.xq13[5] +\n",
    "                unit.xq13[1] + unit.xq13[2], unit.xq13[3] + \n",
    "                unit.xq13[4] + unit.xq13[0] + unit.xq13[5] + \n",
    "                unit.xq13[1] + unit.xq13[3] + unit.xq13[2] + \n",
    "                unit.xq13[4] + unit.xq13[5]])  \n",
    "\n",
    "fig, axs = plt.subplots(1, 1, figsize=(14, 11))\n",
    "\n",
    "axs.plot(x, znp, 'bs', label= 'Weight in kg and charge \\n in coulombs, respectively')\n",
    "\n",
    "plt.ylabel('The amount of charge \\n \\n in Cl х Е-19', fontsize=15)\n",
    "plt.xlabel('The amount of mass', fontsize=15)\n",
    "\n",
    "plt.text(0, 0.01e-18, \"Tachyon\")\n",
    "plt.text(0.02e-27, 0, tachyon_mass)\n",
    "plt.text(0.02e-27, -0.01e-18, tachyon_charge)\n",
    "\n",
    "plt.text(0.05e-27, -unit.qe + 0.015e-18, \"Electron\")\n",
    "plt.text(0.05e-27, -unit.qe + 0.005e-18, unit.me)\n",
    "plt.text(0.05e-27, -unit.qe - 0.025e-19, -unit.qe)\n",
    "\n",
    "plt.text(1.5e-27 - 0.05e-27, unit.qe + 0.05e-19, \"Proton&Proton2\")\n",
    "\n",
    "plt.text(1.5e-27 - 0.5e-27, unit.qe, unit.xm02[0] + unit.xm02[1] + \n",
    "         unit.xm02[0] + unit.xm02[2] + unit.xm02[1] + \n",
    "         unit.xm02[3] + unit.xm02[2] + unit.xm02[4] + \n",
    "         unit.xm02[5])\n",
    "\n",
    "plt.text(1.5e-27 - 0.5e-27, unit.qe - 0.1e-19, unit.xq02[0] + unit.xq02[1] + \n",
    "         unit.xq02[0] + unit.xq02[2] + unit.xq02[1] + \n",
    "         unit.xq02[3] + unit.xq02[2] + unit.xq02[4] + \n",
    "         unit.xq02[5])\n",
    "\n",
    "\n",
    "plt.text(1.5e-27 - 0.2e-27, unit.qe - 0.2e-19, unit.xm13[0] + unit.xm13[1] + \n",
    "         unit.xm13[3] + unit.xm13[2] + unit.xm13[4] + \n",
    "         unit.xm13[0] + unit.xm13[5] + \n",
    "         unit.xm13[1] + unit.xm13[2])\n",
    "\n",
    "plt.text(1.5e-27 - 0.2e-27, unit.qe - 0.3e-19, unit.xq13[0] + unit.xq13[1] + \n",
    "         unit.xq13[3] + unit.xq13[2] + unit.xq13[4] + \n",
    "         unit.xq13[0] + unit.xq13[5] +\n",
    "         unit.xq13[1] + unit.xq13[2])\n",
    "\n",
    "plt.text(1.55e-27, 0.4e-19, \"Neutron2\")\n",
    "\n",
    "plt.text(1.15e-27, 0.25e-19, unit.xm02[3] + unit.xm02[4] + \n",
    "         unit.xm02[3] + unit.xm02[5] + unit.xm02[4] + \n",
    "         unit.xm02[0] + unit.xm02[4] + unit.xm02[1] + \n",
    "         unit.xm02[2])\n",
    "\n",
    "plt.text(1.15e-27, 0.15e-19, unit.xq02[3] + unit.xq02[4] + \n",
    "         unit.xq02[3] + unit.xq02[5] + unit.xq02[4] + \n",
    "         unit.xq02[0] + unit.xq02[4] + \n",
    "         unit.xq02[1] + unit.xq02[2])\n",
    "\n",
    "plt.text(1.5e-27, 0 -0.05e-19, \"Neutron\")\n",
    "plt.text(1.3e-27, 0 -0.15e-19, unit.xm13[3] + unit.xm13[4] + \n",
    "              unit.xm13[0] + unit.xm13[5] + unit.xm13[1] + \n",
    "              unit.xm13[3] + unit.xm13[2] + unit.xm13[4] + \n",
    "              unit.xm13[5])\n",
    "\n",
    "plt.text(1.3e-27, 0-0.25e-19, unit.xq13[3] + \n",
    "                unit.xq13[4] + unit.xq13[0] + unit.xq13[5] + \n",
    "                unit.xq13[1] + unit.xq13[3] + unit.xq13[2] + \n",
    "                unit.xq13[4] + unit.xq13[5])\n",
    "\n",
    "\n",
    "yticks(fontsize=12)\n",
    "plt.legend(loc='upper left', fontsize=18)\n",
    "grid()         \n",
    "plt.title('Mass and charge from tachyon to neutron\\n' \n",
    "          'Graph#28\\n', fontsize=20)\n",
    "\n",
    "\n",
    "# THE DISTRIBUTION ELECTRIC CHARGE FOR NEUTRON2\n",
    "# FOR SEGMENT AT PRESENT`S TIME\n",
    "\n",
    "x = np.array([0, 1, 2, 3, 4])\n",
    "\n",
    "# neutronv2 free state\n",
    "znp = np.array([unit.xq13[3], unit.xq13[5], unit.xq13[3], unit.xq13[2], unit.xq13[5]])  \n",
    "\n",
    "xx = np.linspace(x.min(),x.max(), 1000)\n",
    "fig, axs = plt.subplots(1, 1, figsize=(14, 11))\n",
    "\n",
    "itp2 = PchipInterpolator(x,znp)\n",
    "window_size, poly_order = 3, 1\n",
    "\n",
    "znpznp_sg = savgol_filter(itp2(xx), window_size, poly_order)\n",
    "\n",
    "axs.plot(x, znp, 'bs', label= 'The neutronv2')\n",
    "axs.plot(xx, znpznp_sg, 'b', label= \"Smoothed curve\")\n",
    "\n",
    "# or fit to a global function for neutron2 \n",
    "def func(x, A, B, x0, sigma):\n",
    "    return A+B*np.tanh((x-x0)/sigma)\n",
    "    \n",
    "fit, _ = curve_fit(func, x, znp)\n",
    "znpznp_fit = func(xx, *fit)\n",
    "\n",
    "axs.plot(xx, znpznp_fit, 'b--', \n",
    "         label=r\"$f(xnn) = |A| + B \\tanh\\left(\\frac{x-x_0}{\\sigma}\\right)$\")\n",
    "\n",
    "plt.ylabel('The amount of charge \\n \\n in Cl х Е-20', fontsize=15)\n",
    "plt.xlabel('Shells & present time', fontsize=15)\n",
    "\n",
    "yticks(fontsize=12)\n",
    "plt.legend(loc='upper left', fontsize=16)\n",
    "grid()         \n",
    "plt.title('THE DISTRIBUTION ELECTRIC CHARGE FOR NEUTRON2 \\n' \n",
    "          'FOR SEGMENT AT PRESENT`S TIME\\n Graph#29.\\n', fontsize=17)\n",
    "\n",
    "# Interrelation of electric charge, volume and mass,\n",
    "# segment for the present time, 3D graf\n",
    "\n",
    "fig = plt.figure(figsize=plt.figaspect(0.3))\n",
    "\n",
    "ax = fig.add_subplot(1, 2, 1, projection='3d')\n",
    "\n",
    "Xnn = ([unit.xq02[0], unit.xq02[0], unit.xq02[2], unit.xq02[2], unit.xq02[5]])\n",
    "Ynn = ([unit.xm02[0], unit.xm02[0], unit.xm02[2], unit.xm02[2], unit.xm02[5]])\n",
    "Znn = ([unit.xv02[0], unit.xv02[0], unit.xv02[2], unit.xv02[2], unit.xv02[5]])\n",
    "\n",
    "ax.plot(Xnn,Ynn,Znn)\n",
    "\n",
    "ax.set_xlabel('\\n \\n \\n Electric charge \\n ', fontsize = 15)\n",
    "ax.set_zlabel('\\n \\n \\n \\n \\n Volume \\n ', fontsize = 15)\n",
    "ax.set_ylabel('\\n \\n \\n \\n Mass\\n ', fontsize = 15)\n",
    "\n",
    "ax.text2D(0.2, 0.95,         \n",
    "          \"Proton segment & present time \\n\" \n",
    "          \"Graph # 30\", \n",
    "          transform=ax.transAxes, fontsize = 16)\n",
    "\n",
    "# Interrelation of Q, M and V in neytron2, 3D graf\n",
    "\n",
    "ax = fig.add_subplot(1, 2, 2, projection='3d')\n",
    "\n",
    "Xnn = ([unit.xq13[3], unit.xq13[5], unit.xq13[3], unit.xq13[2], unit.xq13[5]])\n",
    "Ynn = ([unit.xm13[3], unit.xm13[5], unit.xm13[3], unit.xm13[2], unit.xm13[5]])\n",
    "Znn = ([unit.xv13[3], unit.xv13[5], unit.xv13[3], unit.xv13[2], unit.xv13[5]])\n",
    "\n",
    "ax.plot(Xnn,Ynn,Znn)\n",
    "\n",
    "ax.set_xlabel('\\n \\n \\n Electric charge \\n ', \n",
    "              fontsize = 15)\n",
    "ax.set_zlabel('\\n \\n \\n \\n \\n Mass \\n ', fontsize = 15)\n",
    "ax.set_ylabel('\\n \\n \\n \\n Volume\\n ', fontsize = 15)\n",
    "\n",
    "ax.text2D(0.2, 0.95, \n",
    "          \n",
    "          \"Neytron2 segment & present time \\n\"\n",
    "          \"Graph # 31\", \n",
    "          transform=ax.transAxes, fontsize = 16)\n",
    "\n",
    "print('\\n Initial conditions. Table 1.\\n')\n",
    "print(table1)\n",
    "\n",
    "# table2 Reserved for quarks\n",
    "\n",
    "print('\\nValues of electric charge, mass, volume by shells for the proton2.\\n'\n",
    "     'Table 3.')\n",
    "print(table3)\n",
    "\n",
    "print('\\nValues of electric charge, mass, volume by shells for the proton.\\n'\n",
    "     'Table 4.')\n",
    "print(table4)\n",
    "\n",
    "print('\\nValues of electric charge, mass, volume by shells for the neutron2.\\n'\n",
    "     'Table 5.')\n",
    "print(table5)\n",
    "\n",
    "print('\\nValues of electric charge, mass, volume by shells for the neutron.\\n'\n",
    "     'Table 6.')\n",
    "print(table6)\n",
    "\n",
    "print('\\n Mass, electric charge and volume of the tachyon.\\n'\n",
    "      'Table 7.')\n",
    "print(table7)\n",
    "\n",
    "print('\\n The distribution of characteristics for neutron over time segments. Table 8.\\n')\n",
    "print(table8)\n",
    "\n",
    "print('\\n The distribution of characteristics for proton over time segments. Table 9.\\n')\n",
    "print(table9)\n",
    "\n",
    "print('\\n The distribution of characteristics for neutron2 over time segments. Table 10.\\n')\n",
    "print(table10)\n",
    "\n",
    "print('\\n The distribution of characteristics for proton2 over time segments. Table 11.\\n')\n",
    "print(table11)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
